// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user-session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (
    session_id,
    user_id,
    token,
    refresh_token,
    user_agent,
    ip,
    channel,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, session_id, user_id, token, refresh_token, user_agent, ip, channel, expires_at, created_at
`

type CreateUserSessionParams struct {
	SessionID    uuid.UUID `json:"session_id"`
	UserID       int64     `json:"user_id"`
	Token        string    `json:"token"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	Ip           string    `json:"ip"`
	Channel      string    `json:"channel"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createUserSession,
		arg.SessionID,
		arg.UserID,
		arg.Token,
		arg.RefreshToken,
		arg.UserAgent,
		arg.Ip,
		arg.Channel,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.UserAgent,
		&i.Ip,
		&i.Channel,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSessionByUserID = `-- name: GetUserSessionByUserID :one
SELECT id, session_id, user_id, token, refresh_token, user_agent, ip, channel, expires_at, created_at FROM user_sessions
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserSessionByUserID(ctx context.Context, userID int64) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getUserSessionByUserID, userID)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.UserAgent,
		&i.Ip,
		&i.Channel,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserSession = `-- name: UpdateUserSession :one
UPDATE user_sessions
SET
    token = $2,
    refresh_token = $3,
    user_agent = $4,
    ip = $5,
    channel = $6,
    expires_at = $7,
    session_id = $8
WHERE
    user_id = $1
RETURNING id, session_id, user_id, token, refresh_token, user_agent, ip, channel, expires_at, created_at
`

type UpdateUserSessionParams struct {
	UserID       int64     `json:"user_id"`
	Token        string    `json:"token"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	Ip           string    `json:"ip"`
	Channel      string    `json:"channel"`
	ExpiresAt    time.Time `json:"expires_at"`
	SessionID    uuid.UUID `json:"session_id"`
}

func (q *Queries) UpdateUserSession(ctx context.Context, arg UpdateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, updateUserSession,
		arg.UserID,
		arg.Token,
		arg.RefreshToken,
		arg.UserAgent,
		arg.Ip,
		arg.Channel,
		arg.ExpiresAt,
		arg.SessionID,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.UserAgent,
		&i.Ip,
		&i.Channel,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
