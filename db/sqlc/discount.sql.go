// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: discount.sql

package db

import (
	"context"
	"time"
)

const addDiscount = `-- name: AddDiscount :one
INSERT INTO discounts (
    "user_id",
    "label",
    "expiration_time",
    "code",
    "status",
    "created_at"
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, label, expiration_time, code, status, created_at
`

type AddDiscountParams struct {
	UserID         int64     `json:"user_id"`
	Label          string    `json:"label"`
	ExpirationTime time.Time `json:"expiration_time"`
	Code           string    `json:"code"`
	Status         bool      `json:"status"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) AddDiscount(ctx context.Context, arg AddDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, addDiscount,
		arg.UserID,
		arg.Label,
		arg.ExpirationTime,
		arg.Code,
		arg.Status,
		arg.CreatedAt,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.ExpirationTime,
		&i.Code,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDiscountByUserID = `-- name: GetUserDiscountByUserID :one
SELECT id, user_id, label, expiration_time, code, status, created_at FROM discounts
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserDiscountByUserID(ctx context.Context, userID int64) (Discount, error) {
	row := q.db.QueryRowContext(ctx, getUserDiscountByUserID, userID)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.ExpirationTime,
		&i.Code,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
