// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    uuid,
    first_name,
    last_name,
    phone_number,
    email,
    password,
    device_id,
    is_email_verified,
    created_at,
    last_updated_at,
    is_deleted
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, false, now(), DEFAULT, false
) RETURNING id, uuid, first_name, last_name, phone_number, email, password, device_id, last_login, login_attempt, status, is_email_verified, created_at, last_updated_at, is_deleted, deleted_at, deleted_by
`

type CreateUserParams struct {
	Uuid        uuid.UUID `json:"uuid"`
	FirstName   string    `json:"first_name"`
	LastName    string    `json:"last_name"`
	PhoneNumber string    `json:"phone_number"`
	Email       string    `json:"email"`
	Password    string    `json:"password"`
	DeviceID    string    `json:"device_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
		arg.DeviceID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.DeviceID,
		&i.LastLogin,
		&i.LoginAttempt,
		&i.Status,
		&i.IsEmailVerified,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, first_name, last_name, phone_number, password, email, is_email_verified, created_at, last_updated_at
FROM users
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID              int64        `json:"id"`
	Uuid            uuid.UUID    `json:"uuid"`
	FirstName       string       `json:"first_name"`
	LastName        string       `json:"last_name"`
	PhoneNumber     string       `json:"phone_number"`
	Password        string       `json:"password"`
	Email           string       `json:"email"`
	IsEmailVerified string       `json:"is_email_verified"`
	CreatedAt       time.Time    `json:"created_at"`
	LastUpdatedAt   sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Password,
		&i.Email,
		&i.IsEmailVerified,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
FROM users
WHERE uuid = $1 LIMIT 1
`

type GetUserByUUIDRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) GetUserByUUID(ctx context.Context, argUuid uuid.UUID) (GetUserByUUIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, argUuid)
	var i GetUserByUUIDRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const updateUserDevice = `-- name: UpdateUserDevice :one
UPDATE users 
SET device_id = $2,
last_updated_at = now()
WHERE uuid = $1
RETURNING uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
`

type UpdateUserDeviceParams struct {
	Uuid     uuid.UUID `json:"uuid"`
	DeviceID string    `json:"device_id"`
}

type UpdateUserDeviceRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) UpdateUserDevice(ctx context.Context, arg UpdateUserDeviceParams) (UpdateUserDeviceRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserDevice, arg.Uuid, arg.DeviceID)
	var i UpdateUserDeviceRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users 
SET email = $2,
last_updated_at = now()
WHERE uuid = $1
RETURNING uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
`

type UpdateUserEmailParams struct {
	Uuid  uuid.UUID `json:"uuid"`
	Email string    `json:"email"`
}

type UpdateUserEmailRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (UpdateUserEmailRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.Uuid, arg.Email)
	var i UpdateUserEmailRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const updateUserFirstName = `-- name: UpdateUserFirstName :one
UPDATE users 
SET first_name = $2,
last_updated_at = now()
WHERE uuid = $1
RETURNING uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
`

type UpdateUserFirstNameParams struct {
	Uuid      uuid.UUID `json:"uuid"`
	FirstName string    `json:"first_name"`
}

type UpdateUserFirstNameRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) UpdateUserFirstName(ctx context.Context, arg UpdateUserFirstNameParams) (UpdateUserFirstNameRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserFirstName, arg.Uuid, arg.FirstName)
	var i UpdateUserFirstNameRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :one
UPDATE users
SET  last_login = $2,
last_updated_at  = now()
WHERE uuid = $1
RETURNING uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
`

type UpdateUserLastLoginParams struct {
	Uuid      uuid.UUID    `json:"uuid"`
	LastLogin sql.NullTime `json:"last_login"`
}

type UpdateUserLastLoginRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) UpdateUserLastLogin(ctx context.Context, arg UpdateUserLastLoginParams) (UpdateUserLastLoginRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserLastLogin, arg.Uuid, arg.LastLogin)
	var i UpdateUserLastLoginRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const updateUserLastName = `-- name: UpdateUserLastName :one
UPDATE users 
SET last_name = $2,
last_updated_at = now()
WHERE uuid = $1
RETURNING uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
`

type UpdateUserLastNameParams struct {
	Uuid     uuid.UUID `json:"uuid"`
	LastName string    `json:"last_name"`
}

type UpdateUserLastNameRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) UpdateUserLastName(ctx context.Context, arg UpdateUserLastNameParams) (UpdateUserLastNameRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserLastName, arg.Uuid, arg.LastName)
	var i UpdateUserLastNameRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const updateUserPhoneNumber = `-- name: UpdateUserPhoneNumber :one
UPDATE users 
SET phone_number = $2,
last_updated_at = now()
WHERE uuid = $1
RETURNING uuid, first_name, last_name, phone_number, email, created_at, last_updated_at
`

type UpdateUserPhoneNumberParams struct {
	Uuid        uuid.UUID `json:"uuid"`
	PhoneNumber string    `json:"phone_number"`
}

type UpdateUserPhoneNumberRow struct {
	Uuid          uuid.UUID    `json:"uuid"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	PhoneNumber   string       `json:"phone_number"`
	Email         string       `json:"email"`
	CreatedAt     time.Time    `json:"created_at"`
	LastUpdatedAt sql.NullTime `json:"last_updated_at"`
}

func (q *Queries) UpdateUserPhoneNumber(ctx context.Context, arg UpdateUserPhoneNumberParams) (UpdateUserPhoneNumberRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserPhoneNumber, arg.Uuid, arg.PhoneNumber)
	var i UpdateUserPhoneNumberRow
	err := row.Scan(
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}
